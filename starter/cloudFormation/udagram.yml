
Parameters:
  MyExerciseEnvironment:
    Description: An MyExerciseEnvironment name that will be prefixed to resource names.
    Type: String

  AppName:
    Description: Name of the application-related resources.
    Type: String

Resources:
  MyLoadBalancerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access to the load balancer.
      VpcId:
        Fn::ImportValue: !Sub "${MyExerciseEnvironment}-vpc-id"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  UdagramServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access to the hosts from MyLoadBalancerSecGroup.
      VpcId:
        Fn::ImportValue: !Sub "${MyExerciseEnvironment}-vpc-id"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref MyLoadBalancerSecGroup
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  UdagramAppServerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}-web-servers"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: myUdagramS3BucketPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
            Resource: !Sub "arn:aws:s3:::${AppName}-app-storage-bucket/*"

  UdagramAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
      - !Ref UdagramAppServerRole

  UdagramAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${AppName}-web-servers"
      LaunchTemplateData:
        UserData:
          Fn::Base64: !Sub "#!/bin/bash\nsudo apt update\nsudo apt install unzip apache2 -y\ncurl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv?.zip\"\nunzip awscliv2.zip\n./aws/install\n#magic___^_^___line\naws s3 cp s3://udagram-application-app-storage-bucket/index.zip .\nunzip -o index.zip\nsudo rm ~/../../var/www/html/index.html\nsudo mv -v ./src/* ~/../../var/www/html\ncd ~/ ../../var/www/html\n#magic___^_^___line\nsudo chown -R www-data:www-data . \nsudo systemctl start apache2. service\n#magic___^_^___line\n"
        ImageId: ami-053b0d53c279acc90
        SecurityGroupIds:
        - !Ref UdagramServerSecGroup
        InstanceType: t2.micro
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: 10
            VolumeType: gp2
        IamInstanceProfile:
          Name: !Ref UdagramAppInstanceProfile

  UdagramWebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub "${MyExerciseEnvironment}-private-subnets"
      LaunchTemplate:
        LaunchTemplateId: !Ref UdagramAppLaunchTemplate
        Version: !GetAtt UdagramAppLaunchTemplate.LatestVersionNumber
      MinSize: '4'
      DesiredCapacity: '4'
      MaxSize: '4'
      TargetGroupARNs:
      - Ref: UdagramAppTargetGroup

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${MyExerciseEnvironment}-public-subnet1"
      - Fn::ImportValue: !Sub "${MyExerciseEnvironment}-public-subnet2"
      SecurityGroups:
      - Ref: MyLoadBalancerSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref UdagramAppTargetGroup
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: '80'
      Protocol: HTTP

  MyLoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref UdagramAppTargetGroup
      Conditions:
      - Field: path-pattern
        Values: ['/']
      ListenerArn: !Ref Listener
      Priority: 1

  UdagramAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${MyExerciseEnvironment}-vpc-id"

  UdagramBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AppName}-app-storage-bucket"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

Outputs:
  LoadBalancerURL:
    Description: Public URL of the Load Balancer.
    Value:
      Fn::Join:
      - ""
      - - "http://"
        - !GetAtt MyLoadBalancer.DNSName
  BucketName:
    Description: Name of the S3 bucket.
    Value: !Ref UdagramBucket
